//这个是用来管理包的，跟java的package概念类似，多个rule文件时，可以按包来管理rule代码。
package com.rules

//drl 规则文件中，可以直接使用java定义好的类，只需要import进来就好
import com.siaron.drools.model.Address;
import com.siaron.drools.model.AddressCheckResult;
import java.util.concurrent.atomic.AtomicInteger;

//相当于全局变量声明，多个规则文件中可共享该变量（后面会演示这一用法），要注意的是：共享全局变量建议不要用Integer这种"简单"类型，这样无法在规则文件中修改变量的"值"，建议用复杂类型（比如上面的AtomicInteger）
global String temp;
global AtomicInteger count;

//函数示例 即：函数，可以定义一些共用函数，在本drl文件被其它规则共用。
function void print(String messgae){
    System.out.println(messgae);
}

//rule ... when ... then ... end
//rule后面的"say-hi"为规则名称，when后面的相当于判断条件（注：声明条件的同时，还能声明所谓fact"变量"-[不太准确，暂且这样叫吧]，message:Message(...)这里就相当于把后面一串东西，保存在message这个fact"变量中）
rule demo_rule1
    when
        address : Address(postcode != null, postcode matches "([0-9]{5})")
        checkResult : AddressCheckResult();
    then
        checkResult.setPostCodeResult(true);
        System.out.println("demo_rule1 规则中打印日志：校验通过!");
end


//rule ... when ... then ... end
//rule后面的"say-hi"为规则名称，when后面的相当于判断条件（注：声明条件的同时，还能声明所谓fact"变量"-[不太准确，暂且这样叫吧]，message:Message(...)这里就相当于把后面一串东西，保存在message这个fact"变量中）
rule demo_rule2
    when
        address : Address(postcode != null, postcode matches "([0-9]{5})")
        checkResult : AddressCheckResult();
    then
        checkResult.setPostCodeResult(true);
        System.out.println("demo_rule2 规则中打印日志：校验通过!");
end