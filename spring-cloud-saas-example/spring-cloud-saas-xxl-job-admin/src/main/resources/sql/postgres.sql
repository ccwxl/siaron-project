BEGIN;DROP TABLE IF EXISTS public.xxl_job_qrtz_fired_triggers;DROP TABLE IF EXISTS public.xxl_job_qrtz_paused_trigger_grps;DROP TABLE IF EXISTS public.xxl_job_qrtz_scheduler_state;DROP TABLE IF EXISTS public.xxl_job_qrtz_locks;DROP TABLE IF EXISTS public.xxl_job_qrtz_simple_triggers;DROP TABLE IF EXISTS public.xxl_job_qrtz_cron_triggers;DROP TABLE IF EXISTS public.xxl_job_qrtz_simprop_triggers;DROP TABLE IF EXISTS public.xxl_job_qrtz_blob_triggers;DROP TABLE IF EXISTS public.xxl_job_qrtz_triggers;DROP TABLE IF EXISTS public.xxl_job_qrtz_job_details;DROP TABLE IF EXISTS public.xxl_job_qrtz_calendars;CREATE TABLE public.xxl_job_qrtz_job_details(  sched_name        VARCHAR(120) NOT NULL,  job_name          VARCHAR(200) NOT NULL,  job_group         VARCHAR(200) NOT NULL,  description       VARCHAR(250) NULL,  job_class_name    VARCHAR(250) NOT NULL,  is_durable        BOOL         NOT NULL,  is_nonconcurrent  BOOL         NOT NULL,  is_update_data    BOOL         NOT NULL,  requests_recovery BOOL         NOT NULL,  job_data          BYTEA        NULL,  PRIMARY KEY (sched_name, job_name, job_group));CREATE TABLE public.xxl_job_qrtz_triggers(  sched_name     VARCHAR(120) NOT NULL,  trigger_name   VARCHAR(200) NOT NULL,  trigger_group  VARCHAR(200) NOT NULL,  job_name       VARCHAR(200) NOT NULL,  job_group      VARCHAR(200) NOT NULL,  description    VARCHAR(250) NULL,  next_fire_time BIGINT       NULL,  prev_fire_time BIGINT       NULL,  priority       INTEGER      NULL,  trigger_state  VARCHAR(16)  NOT NULL,  trigger_type   VARCHAR(8)   NOT NULL,  start_time     BIGINT       NOT NULL,  end_time       BIGINT       NULL,  calendar_name  VARCHAR(200) NULL,  misfire_instr  SMALLINT     NULL,  job_data       BYTEA        NULL,  PRIMARY KEY (sched_name, trigger_name, trigger_group),  FOREIGN KEY (sched_name, job_name, job_group)  REFERENCES public.xxl_job_qrtz_job_details (sched_name, job_name, job_group));CREATE TABLE public.xxl_job_qrtz_simple_triggers(  sched_name      VARCHAR(120) NOT NULL,  trigger_name    VARCHAR(200) NOT NULL,  trigger_group   VARCHAR(200) NOT NULL,  repeat_count    BIGINT       NOT NULL,  repeat_interval BIGINT       NOT NULL,  times_triggered BIGINT       NOT NULL,  PRIMARY KEY (sched_name, trigger_name, trigger_group),  FOREIGN KEY (sched_name, trigger_name, trigger_group)  REFERENCES public.xxl_job_qrtz_triggers (sched_name, trigger_name, trigger_group));CREATE TABLE public.xxl_job_qrtz_cron_triggers(  sched_name      VARCHAR(120) NOT NULL,  trigger_name    VARCHAR(200) NOT NULL,  trigger_group   VARCHAR(200) NOT NULL,  cron_expression VARCHAR(120) NOT NULL,  time_zone_id    VARCHAR(80),  PRIMARY KEY (sched_name, trigger_name, trigger_group),  FOREIGN KEY (sched_name, trigger_name, trigger_group)  REFERENCES public.xxl_job_qrtz_triggers (sched_name, trigger_name, trigger_group));CREATE TABLE public.xxl_job_qrtz_simprop_triggers(  sched_name    VARCHAR(120)   NOT NULL,  trigger_name  VARCHAR(200)   NOT NULL,  trigger_group VARCHAR(200)   NOT NULL,  str_prop_1    VARCHAR(512)   NULL,  str_prop_2    VARCHAR(512)   NULL,  str_prop_3    VARCHAR(512)   NULL,  int_prop_1    INT            NULL,  int_prop_2    INT            NULL,  long_prop_1   BIGINT         NULL,  long_prop_2   BIGINT         NULL,  dec_prop_1    NUMERIC(13, 4) NULL,  dec_prop_2    NUMERIC(13, 4) NULL,  bool_prop_1   BOOL           NULL,  bool_prop_2   BOOL           NULL,  PRIMARY KEY (sched_name, trigger_name, trigger_group),  FOREIGN KEY (sched_name, trigger_name, trigger_group)  REFERENCES public.xxl_job_qrtz_triggers (sched_name, trigger_name, trigger_group));CREATE TABLE public.xxl_job_qrtz_blob_triggers(  sched_name    VARCHAR(120) NOT NULL,  trigger_name  VARCHAR(200) NOT NULL,  trigger_group VARCHAR(200) NOT NULL,  blob_data     BYTEA        NULL,  PRIMARY KEY (sched_name, trigger_name, trigger_group),  FOREIGN KEY (sched_name, trigger_name, trigger_group)  REFERENCES public.xxl_job_qrtz_triggers (sched_name, trigger_name, trigger_group));CREATE TABLE public.xxl_job_qrtz_calendars(  sched_name    VARCHAR(120) NOT NULL,  calendar_name VARCHAR(200) NOT NULL,  calendar      BYTEA        NOT NULL,  PRIMARY KEY (sched_name, calendar_name));CREATE TABLE public.xxl_job_qrtz_paused_trigger_grps(  sched_name    VARCHAR(120) NOT NULL,  trigger_group VARCHAR(200) NOT NULL,  PRIMARY KEY (sched_name, trigger_group));CREATE TABLE public.xxl_job_qrtz_fired_triggers(  sched_name        VARCHAR(120) NOT NULL,  entry_id          VARCHAR(95)  NOT NULL,  trigger_name      VARCHAR(200) NOT NULL,  trigger_group     VARCHAR(200) NOT NULL,  instance_name     VARCHAR(200) NOT NULL,  fired_time        BIGINT       NOT NULL,  sched_time        BIGINT       NOT NULL,  priority          INTEGER      NOT NULL,  state             VARCHAR(16)  NOT NULL,  job_name          VARCHAR(200) NULL,  job_group         VARCHAR(200) NULL,  is_nonconcurrent  BOOL         NULL,  requests_recovery BOOL         NULL,  PRIMARY KEY (sched_name, entry_id));CREATE TABLE public.xxl_job_qrtz_scheduler_state(  sched_name        VARCHAR(120) NOT NULL,  instance_name     VARCHAR(200) NOT NULL,  last_checkin_time BIGINT       NOT NULL,  checkin_interval  BIGINT       NOT NULL,  PRIMARY KEY (sched_name, instance_name));CREATE TABLE public.xxl_job_qrtz_locks(  sched_name VARCHAR(120) NOT NULL,  lock_name  VARCHAR(40)  NOT NULL,  PRIMARY KEY (sched_name, lock_name));-- ------------------------------ Table structure for xxl_job_qrtz_trigger_group-- ----------------------------CREATE SEQUENCE public.xxl_job_qrtz_trigger_group_id_seq  START WITH 1  INCREMENT BY 1  NO MINVALUE  NO MAXVALUE  CACHE 1;DROP TABLE IF EXISTS public.xxl_job_qrtz_trigger_group;CREATE TABLE public.xxl_job_qrtz_trigger_group (  id           int8 DEFAULT nextval('public.xxl_job_qrtz_trigger_group_id_seq' :: regclass) NOT NULL,  app_name     varchar(255) COLLATE "default" DEFAULT '' :: character varying            NOT NULL,  title        varchar(255) COLLATE "default" DEFAULT '' :: character varying            NOT NULL,  orders       int,  address_type int4 DEFAULT 0                                                            NOT NULL,  address_list varchar(512) COLLATE "default" DEFAULT '' :: character varying,  PRIMARY KEY (id)) WITH (OIDS = FALSE);COMMENT ON COLUMN public.xxl_job_qrtz_trigger_group.app_nameIS '执行器AppName';COMMENT ON COLUMN public.xxl_job_qrtz_trigger_group.titleIS '执行器名称';COMMENT ON COLUMN public.xxl_job_qrtz_trigger_group.ordersIS '排序';COMMENT ON COLUMN public.xxl_job_qrtz_trigger_group.address_typeIS '执行器地址类型：0=自动注册、1=手动录入';COMMENT ON COLUMN public.xxl_job_qrtz_trigger_group.address_listIS '执行器地址列表，多地址逗号分隔';-- ------------------------------ Table structure for xxl_job_qrtz_trigger_info-- ----------------------------CREATE SEQUENCE public.xxl_job_qrtz_trigger_info_id_seq  START WITH 1  INCREMENT BY 1  NO MINVALUE  NO MAXVALUE  CACHE 1;DROP TABLE IF EXISTS public.xxl_job_qrtz_trigger_info;CREATE TABLE public.xxl_job_qrtz_trigger_info (  id                        int8 DEFAULT nextval('public.xxl_job_qrtz_trigger_info_id_seq' :: regclass) NOT NULL,  job_group                 int8 DEFAULT 0                                                           NOT NULL,  job_cron                  varchar(128) COLLATE "default" DEFAULT '' :: character varying           NOT NULL,  job_desc                  varchar(255) COLLATE "default" DEFAULT '' :: character varying           NOT NULL,  add_time                  timestamp(6)                   DEFAULT NULL :: timestamp WITHOUT TIME ZONE,  update_time               timestamp(6)                   DEFAULT NULL :: timestamp WITHOUT TIME ZONE,  author                    varchar(64) COLLATE "default"  DEFAULT NULL :: character varying,  alarm_email               varchar(255) COLLATE "default" DEFAULT NULL :: character varying,  executor_route_strategy   varchar(255) COLLATE "default" DEFAULT NULL :: character varying,  executor_handler          varchar(255) COLLATE "default" DEFAULT NULL :: character varying,  executor_param            varchar(512) COLLATE "default" DEFAULT NULL :: character varying,  executor_block_strategy   varchar(50) COLLATE "default" DEFAULT NULL :: character varying          NOT NULL,  executor_timeout          int8 DEFAULT 0                                                           NOT NULL,  executor_fail_retry_count int8,  glue_type                 varchar(255) COLLATE "default" DEFAULT '' :: character varying           NOT NULL,  glue_source               text COLLATE "default",  glue_remark               varchar(255) COLLATE "default" DEFAULT NULL :: character varying,  glue_updatetime           timestamp(6)                   DEFAULT NULL :: timestamp WITHOUT TIME ZONE,  child_jobid               varchar(255) COLLATE "default" DEFAULT '' :: character varying,  PRIMARY KEY (id)) WITH (OIDS = FALSE);COMMENT ON COLUMN public.xxl_job_qrtz_trigger_info.job_groupIS '执行器主键ID';COMMENT ON COLUMN public.xxl_job_qrtz_trigger_info.job_cronIS '任务执行CRON';COMMENT ON COLUMN public.xxl_job_qrtz_trigger_info.job_descIS '任务描述';COMMENT ON COLUMN public.xxl_job_qrtz_trigger_info.authorIS '作者';COMMENT ON COLUMN public.xxl_job_qrtz_trigger_info.alarm_emailIS '报警邮件';COMMENT ON COLUMN public.xxl_job_qrtz_trigger_info.executor_route_strategyIS '执行器路由策略';COMMENT ON COLUMN public.xxl_job_qrtz_trigger_info.executor_handlerIS '执行器任务handler';COMMENT ON COLUMN public.xxl_job_qrtz_trigger_info.executor_paramIS '执行器任务参数';COMMENT ON COLUMN public.xxl_job_qrtz_trigger_info.executor_block_strategyIS '阻塞处理策略';COMMENT ON COLUMN public.xxl_job_qrtz_trigger_info.executor_timeoutIS '任务执行超时时间，单位秒';COMMENT ON COLUMN public.xxl_job_qrtz_trigger_info.executor_fail_retry_countIS '失败重试次数';COMMENT ON COLUMN public.xxl_job_qrtz_trigger_info.glue_typeIS 'GLUE类型';COMMENT ON COLUMN public.xxl_job_qrtz_trigger_info.glue_sourceIS 'GLUE源代码';COMMENT ON COLUMN public.xxl_job_qrtz_trigger_info.glue_remarkIS 'GLUE备注';COMMENT ON COLUMN public.xxl_job_qrtz_trigger_info.glue_updatetimeIS 'GLUE更新时间';COMMENT ON COLUMN public.xxl_job_qrtz_trigger_info.child_jobidIS '子任务ID，多个逗号分隔';-- ------------------------------ Table structure for xxl_job_qrtz_trigger_log-- ----------------------------CREATE SEQUENCE public.xxl_job_qrtz_trigger_log_id_seq  START WITH 1  INCREMENT BY 1  NO MINVALUE  NO MAXVALUE  CACHE 1;DROP TABLE IF EXISTS public.xxl_job_qrtz_trigger_log;CREATE TABLE public.xxl_job_qrtz_trigger_log (  id                        bigint DEFAULT nextval('public.xxl_job_qrtz_trigger_log_id_seq' :: regclass) NOT NULL,  job_group                 bigint NOT NULL,  job_id                    bigint NOT NULL,  executor_address          varchar(255)             DEFAULT NULL,  executor_handler          varchar(255)             DEFAULT NULL,  executor_param            varchar(512)             DEFAULT NULL,  executor_sharding_param   varchar(20)              DEFAULT NULL,  executor_fail_retry_count int8   NOT NULL,  trigger_time              timestamp WITH TIME ZONE DEFAULT NULL,  trigger_code              int8   NOT NULL,  trigger_msg               text,  handle_time               timestamp WITH TIME ZONE DEFAULT NULL,  handle_code               int8,  handle_msg                text,  PRIMARY KEY (id)) WITH (OIDS = FALSE);COMMENT ON COLUMN public.xxl_job_qrtz_trigger_log.idIS '主键ID';COMMENT ON COLUMN public.xxl_job_qrtz_trigger_log.job_groupIS '执行器主键ID';COMMENT ON COLUMN public.xxl_job_qrtz_trigger_log.job_idIS '任务，主键ID';COMMENT ON COLUMN public.xxl_job_qrtz_trigger_log.executor_addressIS '执行器地址，本次执行的地址';COMMENT ON COLUMN public.xxl_job_qrtz_trigger_log.executor_handlerIS '执行器任务handler';COMMENT ON COLUMN public.xxl_job_qrtz_trigger_log.executor_paramIS '执行器任务参数';COMMENT ON COLUMN public.xxl_job_qrtz_trigger_log.executor_sharding_paramIS '执行器任务分片参数，格式如 1/2';COMMENT ON COLUMN public.xxl_job_qrtz_trigger_log.executor_fail_retry_countIS '失败重试次数';COMMENT ON COLUMN public.xxl_job_qrtz_trigger_log.trigger_timeIS '调度-时间';COMMENT ON COLUMN public.xxl_job_qrtz_trigger_log.trigger_codeIS '调度-结果';COMMENT ON COLUMN public.xxl_job_qrtz_trigger_log.trigger_msgIS '调度-日志';COMMENT ON COLUMN public.xxl_job_qrtz_trigger_log.handle_timeIS '执行-时间';COMMENT ON COLUMN public.xxl_job_qrtz_trigger_log.handle_codeIS '执行-状态';COMMENT ON COLUMN public.xxl_job_qrtz_trigger_log.handle_msgIS '执行-日志';-- ------------------------------ Table structure for xxl_job_qrtz_trigger_logglue-- ----------------------------CREATE SEQUENCE public.xxl_job_qrtz_trigger_logglue_id_seq  START WITH 1  INCREMENT BY 1  NO MINVALUE  NO MAXVALUE  CACHE 1;DROP TABLE IF EXISTS public.xxl_job_qrtz_trigger_logglue;CREATE TABLE public.xxl_job_qrtz_trigger_logglue (  id          int8 DEFAULT nextval('public.xxl_job_qrtz_trigger_logglue_id_seq' :: regclass) NOT NULL,  job_id      int8 DEFAULT 0                                                              NOT NULL,  glue_type   varchar(50) COLLATE "default" DEFAULT '' :: character varying,  glue_source text COLLATE "default",  glue_remark varchar(128) COLLATE "default" DEFAULT '' :: character varying              NOT NULL,  add_time    timestamp(6)                  DEFAULT now(),  update_time timestamp(6)                  DEFAULT now(),  PRIMARY KEY (id)) WITH (OIDS = FALSE);COMMENT ON COLUMN public.xxl_job_qrtz_trigger_logglue.job_idIS '任务，主键ID';COMMENT ON COLUMN public.xxl_job_qrtz_trigger_logglue.glue_typeIS 'GLUE类型';COMMENT ON COLUMN public.xxl_job_qrtz_trigger_logglue.glue_sourceIS 'GLUE源代码';COMMENT ON COLUMN public.xxl_job_qrtz_trigger_logglue.glue_remarkIS 'GLUE备注';-- ------------------------------ Table structure for xxl_job_qrtz_trigger_registry-- ----------------------------CREATE SEQUENCE public.xxl_job_qrtz_trigger_registry_id_seq  START WITH 1  INCREMENT BY 1  NO MINVALUE  NO MAXVALUE  CACHE 1;DROP TABLE IF EXISTS public.xxl_job_qrtz_trigger_registry;CREATE TABLE public.xxl_job_qrtz_trigger_registry (  id             int4 DEFAULT nextval('public.xxl_job_qrtz_trigger_registry_id_seq' :: regclass) NOT NULL,  registry_group varchar(255) COLLATE "default",  registry_key   varchar(255) COLLATE "default",  registry_value varchar(255) COLLATE "default",  update_time    timestamp(6) DEFAULT current_timestamp,  PRIMARY KEY (id)) WITH (OIDS = FALSE);-- ------------------------------ INSERT Data-- ----------------------------INSERT INTO public.xxl_job_qrtz_trigger_group (id, app_name, title, orders, address_type, address_list)VALUES (1, 'xxl-job-executor-sample', '示例执行器', 1, 0, NULL);INSERT INTO public.xxl_job_qrtz_trigger_info (id,                                              job_group,                                              job_cron,                                              job_desc,                                              add_time,                                              update_time,                                              author,                                              alarm_email,                                              executor_route_strategy,                                              executor_handler,                                              executor_param,                                              executor_block_strategy,                                              executor_timeout,                                              executor_fail_retry_count,                                              glue_type,                                              glue_source,                                              glue_remark,                                              glue_updatetime,                                              child_jobid)VALUES (1,        1,        '0 0 0 * * ? *',        '测试任务1',        '2018-11-03 22:21:31',        '2018-11-03 22:21:31',        'XXL',        '',        'FIRST',        'demoJobHandler',        '',        'SERIAL_EXECUTION',        0,        0,        'BEAN',        '',        'GLUE代码初始化',        '2018-11-03 22:21:31',        '');-- ------------------------------ Index-- ----------------------------CREATE INDEX idx_qrtz_j_req_recovery  ON public.xxl_job_qrtz_job_details (sched_name, requests_recovery);CREATE INDEX idx_qrtz_j_grp  ON public.xxl_job_qrtz_job_details (sched_name, job_group);CREATE INDEX idx_qrtz_t_j  ON public.xxl_job_qrtz_triggers (sched_name, job_name, job_group);CREATE INDEX idx_qrtz_t_jg  ON public.xxl_job_qrtz_triggers (sched_name, job_group);CREATE INDEX idx_qrtz_t_c  ON public.xxl_job_qrtz_triggers (sched_name, calendar_name);CREATE INDEX idx_qrtz_t_g  ON public.xxl_job_qrtz_triggers (sched_name, trigger_group);CREATE INDEX idx_qrtz_t_state  ON public.xxl_job_qrtz_triggers (sched_name, trigger_state);CREATE INDEX idx_qrtz_t_n_state  ON public.xxl_job_qrtz_triggers (sched_name, trigger_name, trigger_group, trigger_state);CREATE INDEX idx_qrtz_t_n_g_state  ON public.xxl_job_qrtz_triggers (sched_name, trigger_group, trigger_state);CREATE INDEX idx_qrtz_t_next_fire_time  ON public.xxl_job_qrtz_triggers (sched_name, next_fire_time);CREATE INDEX idx_qrtz_t_nft_st  ON public.xxl_job_qrtz_triggers (sched_name, trigger_state, next_fire_time);CREATE INDEX idx_qrtz_t_nft_misfire  ON public.xxl_job_qrtz_triggers (sched_name, misfire_instr, next_fire_time);CREATE INDEX idx_qrtz_t_nft_st_misfire  ON public.xxl_job_qrtz_triggers (sched_name, misfire_instr, next_fire_time, trigger_state);CREATE INDEX idx_qrtz_t_nft_st_misfire_grp  ON public.xxl_job_qrtz_triggers (sched_name, misfire_instr, next_fire_time, trigger_group, trigger_state);CREATE INDEX idx_qrtz_ft_trig_inst_name  ON public.xxl_job_qrtz_fired_triggers (sched_name, instance_name);CREATE INDEX idx_qrtz_ft_inst_job_req_rcvry  ON public.xxl_job_qrtz_fired_triggers (sched_name, instance_name, requests_recovery);CREATE INDEX idx_qrtz_ft_j_g  ON public.xxl_job_qrtz_fired_triggers (sched_name, job_name, job_group);CREATE INDEX idx_qrtz_ft_jg  ON public.xxl_job_qrtz_fired_triggers (sched_name, job_group);CREATE INDEX idx_qrtz_ft_t_g  ON public.xxl_job_qrtz_fired_triggers (sched_name, trigger_name, trigger_group);CREATE INDEX idx_qrtz_ft_tg  ON public.xxl_job_qrtz_fired_triggers (sched_name, trigger_group);ALTER TABLE public.xxl_job_qrtz_trigger_group  RENAME "orders" TO "order";COMMENT ON COLUMN public.xxl_job_qrtz_trigger_group."order"IS '排序';COMMIT;